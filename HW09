//Applying ideal low pass filter to input image
#include <opencv2/opencv.hpp>
using namespace cv;

void showFreq(String winName, Mat& F)
{
	Mat planes[2], Fmag;
	split(F, planes);
	magnitude(planes[0], planes[1], Fmag);
	Fmag += 1;
	log(Fmag, Fmag);
	Fmag /= log(2.0);
	normalize(Fmag, Fmag, 0, 1, NORM_MINMAX);
	imshow(winName, Fmag);
}

void showMask(String winName, Mat& H)
{
	Mat maskH[2];
	split(H, maskH);
	imshow(winName, maskH[0]);
}

void swapFreq(Mat& F)
{
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	Mat q0(F, Rect(0, 0, cx, cy)); // Top-Left
	Mat q1(F, Rect(cx, 0, cx, cy)); // Top-Right
	Mat q2(F, Rect(0, cy, cx, cy)); // Bottom-Left
	Mat q3(F, Rect(cx, cy, cx, cy)); // Bottom-Right
	//swap quadrants
	Mat tmp;
	q0.copyTo(tmp);
	q3.copyTo(q0);
	tmp.copyTo(q3);
	q1.copyTo(tmp);
	q2.copyTo(q1);
	tmp.copyTo(q2);
}

Mat myDFT(const Mat& f)
{
	Mat F; //frequency data
	Mat padded; //Padded image
	//Pad image to optimal DFT size with 0s
	int m = getOptimalDFTSize(f.rows);
	int n = getOptimalDFTSize(f.cols);
	copyMakeBorder(f, padded, 0, m - f.rows, 0, n - f.cols,
		BORDER_CONSTANT, Scalar::all(0));
	// allocate memory for storing frequency data and doing DFT
	Mat planes[] = { Mat_<float>(padded),
	Mat(padded.size(), CV_32F, 0.0f) };
	merge(planes, 2, F);
	dft(F, F);
	swapFreq(F);
	return F;
}

Mat myIDFT(const Mat& F)
{
	Mat tmp = F.clone();
	Mat planes[2];
	swapFreq(tmp);
	idft(tmp, tmp, DFT_SCALE);
	split(tmp, planes);
	return planes[0];
}

Mat degradeFilter(const Mat& F, double k)
{
	Mat tmp = F.clone();
	Mat H = Mat(tmp.size(), CV_32FC2, Scalar(1, 1));
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	for (int u = 0; u < F.rows; u++) {
		for (int v = 0; v < F.cols; v++) {
			//float d = sqrt((float)((u - cy) * (u - cy) + (v - cx) * (v - cx)));
			//if (d == 0)H(u, v)[0] = 0;
			int u1 = u - cy;
			int v1 = v - cx;
			double degH = exp(-k * pow((u1 * u1 + v1 * v1), 5 / 6.));
			H.at<Vec2f>(u, v)[0] = degH;
			H.at<Vec2f>(u, v)[1] = degH;
		}
	}
	tmp = tmp.mul(H);
	showMask("H of degrade", H);
	return tmp;
}

Mat degradeImage(const Mat& f, double k)
{
	Mat F = myDFT(f);
	Mat G = degradeFilter(F, k);
	Mat g = myIDFT(G);
	showFreq("Frequency of original image", F);
	showFreq("Frequency of degrade image", G);
	return g;
}

Mat recoveryFilter(const Mat& F, double k)
{
	Mat tmp = F.clone();
	Mat H = Mat(tmp.size(), CV_32FC2, Scalar(1, 1));
	Mat J(tmp.rows, tmp.cols, CV_32FC2);
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	for (int u = 0; u < F.rows; u++) {
		for (int v = 0; v < F.cols; v++) {
			//float d = sqrt((float)((u - cy) * (u - cy) + (v - cx) * (v - cx)));
			//if (d == 0)H(u, v)[0] = 0;
			int u1 = u - cy;
			int v1 = v - cx;
			double degH = 1. / exp(-k * pow((u1 * u1 + v1 * v1), 5 / 6.));
			//int dist = sqrt(u1 * u1 + v1 * v1);
			//if (dist > r)degH = 0;
			H.at<Vec2f>(u, v)[0] = degH;
			H.at<Vec2f>(u, v)[1] = degH;
		}
	}
	tmp = tmp.mul(H);
	showMask("H of recovery", H);
	return tmp;
}

Mat recoveryImage(const Mat& f, double k)
{
	Mat F = myDFT(f);
	Mat G = recoveryFilter(F, k);
	Mat g = myIDFT(G);
	showFreq("Frequency of recovery image", G);
	return g;
}

int main(void)
{
	Mat f = imread("sample.bmp", IMREAD_REDUCED_GRAYSCALE_4);
	if (!f.empty()) {
		Mat g = f.clone();
		imshow("original image", f);
		g.convertTo(g, CV_32F, 1.f / 255);
		Mat deg1 = degradeImage(g, 0.005);
		imshow("Degrade image", deg1);
		Mat rec1 = recoveryImage(deg1, 0.0035);
		imshow("Recovery image", rec1);
		waitKey(0);
	}
	return(0);
