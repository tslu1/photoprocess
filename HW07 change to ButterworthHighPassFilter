//Applying ideal low pass filter to input image
#include <opencv2/opencv.hpp>
using namespace cv;

class UserData {
public:
	Mat src;
	int D0 = 100;
	int n = 1;
};

void showFreq(String winName, Mat& F)
{
	Mat planes[2], Fmag;
	split(F, planes);
	magnitude(planes[0], planes[1], Fmag);
	Fmag += 1;
	log(Fmag, Fmag);
	Fmag /= log(2.0);
	normalize(Fmag, Fmag, 0, 1, NORM_MINMAX);
	imshow(winName, Fmag);
}

void showMask(String winName, Mat& H)
{
	Mat maskH[2];
	split(H, maskH);
	imshow(winName, maskH[0]);
}

void swapFreq(Mat& F)
{
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	Mat q0(F, Rect(0, 0, cx, cy)); // Top-Left
	Mat q1(F, Rect(cx, 0, cx, cy)); // Top-Right
	Mat q2(F, Rect(0, cy, cx, cy)); // Bottom-Left
	Mat q3(F, Rect(cx, cy, cx, cy)); // Bottom-Right
	//swap quadrants
	Mat tmp;
	q0.copyTo(tmp);
	q3.copyTo(q0);
	tmp.copyTo(q3);
	q1.copyTo(tmp);
	q2.copyTo(q1);
	tmp.copyTo(q2);
}

Mat myDFT(Mat& f)
{
	Mat F; //frequency data
	Mat padded; //Padded image
	//Pad image to optimal DFT size with 0s
	int m = getOptimalDFTSize(f.rows);
	int n = getOptimalDFTSize(f.cols);
	copyMakeBorder(f, padded, 0, m - f.rows, 0, n - f.cols,
		BORDER_CONSTANT, Scalar::all(0));
	// allocate memory for storing frequency data and doing DFT
	Mat planes[] = { Mat_<float>(padded),
	Mat(padded.size(), CV_32F, 0.0f) };
	merge(planes, 2, F);
	dft(F, F);
	swapFreq(F);
	return F;
}

Mat myIDFT(Mat& F)
{
	Mat planes[2];
	swapFreq(F);
	idft(F, F, DFT_SCALE);
	split(F, planes);
	return planes[0].clone();
}
//Ideal low pass filter
void IdealLowPassFilter(Mat& F, int d0)
{
	Mat H(F.rows, F.cols, CV_32FC2, Scalar(0, 0));
	circle(H, Point(H.cols / 2, H.rows / 2), d0, Scalar::all(1), -1);
	F = F.mul(H);
}

void GaussianLowPassFilter(Mat& F, int d0)
{
	Mat_<Vec2f> H = Mat(F.rows, F.cols, CV_32FC2);
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	for (int u = 0; u < F.rows; u++) {
		for (int v = 0; v < F.cols; v++) {
			float d = sqrt((float)((u - cy) * (u - cy) + (v - cx) * (v - cx)));
			
            H(u, v)[0] = (float)exp((-d * d) / (2 * d0 * d0));
			H(u, v)[1] = H(u, v)[0];
		}
	}
	F = F.mul(H);
}

void ButterworthHighPassFilter(Mat& F, int d0, int n)
{
	Mat_<Vec2f> H = Mat(F.rows, F.cols, CV_32FC2);
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	for (int u = 0; u < F.rows; u++) {
		for (int v = 0; v < F.cols; v++) {
			float d = sqrt((float)((u - cy) * (u - cy) + (v - cx) * (v - cx)));
			H(u, v)[0] = (float)1 / (1+pow((d0 / d),2*n));
			H(u, v)[1] = H(u, v)[0];
		}
	}
	F = F.mul(H);
	showMask("Butterworth", H);
}

void onchange(int D0, void* data)
{
	UserData& udata = *(UserData*)data;
	Mat f = udata.src.clone();
	/*f.convertTo(f, CV_32F, 1.f / 255);
	Mat F = myDFT(f);
	IdealLowPassFilter(F, udata.D0);
	Mat g = myIDFT(F);
	imshow("result", g);*/
	//GaussianLowPassFilter(f, D0);
	ButterworthHighPassFilter(f, udata.D0, udata.n);
	showFreq("f after Butterworth High Pass Filter", f);
	imshow("result", myIDFT(f));
}

int main(void)
{
	Mat f = imread("sample.bmp", IMREAD_REDUCED_GRAYSCALE_2);
	if (!f.empty()) {
		f.convertTo(f, CV_32F, 1.f / 255);
		Mat F = myDFT(f);
		UserData udata;
		udata.src = F;
		udata.D0 = 100;
		udata.n = 1;
		//Show Result
		imshow("Source", f);
		showFreq("F before being filtered", F);
		//onchange(udata.D0, &udata);
		createTrackbar("D0", "Source", &udata.D0, 255, onchange, &udata);
		createTrackbar("N", "Source", &udata.n, 100, onchange, &udata);
		waitKey(0);
	}
	return(0);
}
