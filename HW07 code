//Applying ideal low pass filter to input image
#include <opencv2/opencv.hpp>
using namespace cv;

class UserData {
public:
	UserData() :D0(100) {}
	Mat src;
	int D0;
};

void swapFreq(Mat& F)
{
	int cx = F.cols / 2;
	int cy = F.rows / 2;
	Mat q0(F, Rect(0, 0, cx, cy)); // Top-Left
	Mat q1(F, Rect(cx, 0, cx, cy)); // Top-Right
	Mat q2(F, Rect(0, cy, cx, cy)); // Bottom-Left
	Mat q3(F, Rect(cx, cy, cx, cy)); // Bottom-Right
	//swap quadrants
	Mat tmp;
	q0.copyTo(tmp);
	q3.copyTo(q0);
	tmp.copyTo(q3);
	q1.copyTo(tmp);
	q2.copyTo(q1);
	tmp.copyTo(q2);
}

Mat myDFT(Mat& f)
{
	Mat F; //frequency data
	Mat padded; //Padded image
	//Pad image to optimal DFT size with 0s
	int m = getOptimalDFTSize(f.rows);
	int n = getOptimalDFTSize(f.cols);
	copyMakeBorder(f, padded, 0, m - f.rows, 0, n - f.cols,
		BORDER_CONSTANT, Scalar::all(0));
	// allocate memory for storing frequency data and doing DFT
	Mat planes[] = { Mat_<float>(padded),
	Mat(padded.size(), CV_32F, 0.0f) };
	merge(planes, 2, F);
	dft(F, F);
	swapFreq(F);
	return F;
}

Mat myIDFT(Mat& F)
{
	Mat planes[2];
	swapFreq(F);
	idft(F, F, DFT_SCALE);
	split(F, planes);
	return planes[0].clone();
}
//Ideal low pass filter
void IdealLowPassFilter(Mat& F, int d0)
{
	Mat H(F.rows, F.cols, CV_32FC2, Scalar(0, 0));
	circle(H, Point(H.cols / 2, H.rows / 2), d0, Scalar::all(1), -1);
	F = F.mul(H);
}

void onchange(int D0 , void* data)
{
	UserData& udata = *(UserData*)data;
	Mat f = udata.src;
	f.convertTo(f, CV_32F, 1.f / 255);
	Mat F = myDFT(f);
	IdealLowPassFilter(F, udata.D0);
	Mat g = myIDFT(F);
	imshow("result", g);
}

int main(void)
{
	UserData udata;
	udata.src = imread("sample.bmp", IMREAD_REDUCED_GRAYSCALE_2);
	if (!udata.src.empty()) {
		//Show Result
		imshow("Source", udata.src);
		onchange(udata.D0 , &udata);
		createTrackbar("PERCENT", "Source", &udata.D0 , 100 , onchange , &udata);
		waitKey(0);
	}
	return(0);
}
